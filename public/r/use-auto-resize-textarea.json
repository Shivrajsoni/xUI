{
  "name": "use-auto-resize-textarea",
  "type": "registry:hook",
  "files": [
    {
      "type": "registry:hook",
      "content": "\"use client\";\nimport { useCallback, useEffect, useRef } from \"react\"\n\ninterface useAutoResizeTextAreaProps{\n    minHeight:number;\n    maxHeight?:number;\n}\n\nexport function useAutoResizeTextArea ({minHeight,maxHeight}:useAutoResizeTextAreaProps){\n    const textAreaRef = useRef<HTMLTextAreaElement>(null);\n    \n    const adjustHeight = useCallback(\n        (reset?:boolean)=> {\n            const textarea = textAreaRef.current;\n            if(!textarea) return;\n\n            if(reset){\n                textarea.style.height = `${minHeight}px`;\n            }\n\n            // Temporarily shrink to get the right scrollHeight\n            textarea.style.height = `${minHeight}px`;\n            // Calculate new height\n            const newHeight = Math.max(\n                minHeight,\n                Math.min(\n                    textarea.scrollHeight,\n                    maxHeight ?? Number.POSITIVE_INFINITY\n                )\n            );\n            textarea.style.height = `${newHeight}px`;\n        },\n        [minHeight,maxHeight]\n    )\n    \n    useEffect(() => {\n        // Set initial height\n        const textarea = textAreaRef.current;\n        if (textarea) {\n            textarea.style.height = `${minHeight}px`;\n        }\n    }, [minHeight]);\n\n    useEffect(() => {\n        const handleResize = () => adjustHeight();\n        window.addEventListener(\"resize\", handleResize);\n        return () => window.removeEventListener(\"resize\", handleResize);\n    }, [adjustHeight]);\n\n    return {textAreaRef,adjustHeight};\n}",
      "path": "/src/hooks/use-auto-resize-textarea.tsx",
      "target": "@/hooks/use-auto-resize-textarea.tsx"
    }
  ]
}