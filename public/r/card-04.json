{
  "name": "card-04",
  "type": "registry:component",
  "dependencies": [
    "lucide-react"
  ],
  "registryDependencies": [
    "badge",
    "button"
  ],
  "files": [
    {
      "type": "registry:component",
      "content": "\"use client\";\n\nimport { cn } from \"@/lib/utils\";\nimport type React from \"react\";\nimport { createContext, useState, useContext, useRef, useEffect } from \"react\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { ArrowRight, Sparkles, Star, Clock, Heart } from \"lucide-react\";\nconst MouseEnterContext = createContext<\n  [boolean, React.Dispatch<React.SetStateAction<boolean>>] | undefined\n>(undefined);\n\nexport const CardContainer = ({\n  children,\n  className,\n  containerClassName,\n  perspective = 1000,\n  rotationIntensity = 25,\n  glowColor = \"rgba(120, 119, 198, 0.4)\",\n  showGlow = true,\n}: {\n  children?: React.ReactNode;\n  className?: string;\n  containerClassName?: string;\n  perspective?: number;\n  rotationIntensity?: number;\n  glowColor?: string;\n  showGlow?: boolean;\n}) => {\n  const containerRef = useRef<HTMLDivElement>(null);\n  const glowRef = useRef<HTMLDivElement>(null);\n  const [isMouseEntered, setIsMouseEntered] = useState(false);\n  const [position, setPosition] = useState({ x: 0, y: 0 });\n\n  const handleMouseMove = (e: React.MouseEvent<HTMLDivElement>) => {\n    if (!containerRef.current) return;\n    const { left, top, width, height } =\n      containerRef.current.getBoundingClientRect();\n\n    // Calculate rotation based on mouse position\n    const x = (e.clientX - left - width / 2) / rotationIntensity;\n    const y = (e.clientY - top - height / 2) / rotationIntensity;\n\n    // Update position for glow effect\n    const mouseX = (e.clientX - left) / width;\n    const mouseY = (e.clientY - top) / height;\n    setPosition({ x: mouseX, y: mouseY });\n\n    containerRef.current.style.transform = `rotateY(${x}deg) rotateX(${-y}deg)`;\n\n    // Update glow position\n    if (glowRef.current && showGlow) {\n      glowRef.current.style.background = `radial-gradient(circle at ${\n        mouseX * 100\n      }% ${mouseY * 100}%, ${glowColor}, transparent 50%)`;\n    }\n  };\n\n  const handleMouseEnter = () => {\n    setIsMouseEntered(true);\n  };\n\n  const handleMouseLeave = () => {\n    if (!containerRef.current) return;\n    setIsMouseEntered(false);\n    containerRef.current.style.transform = `rotateY(0deg) rotateX(0deg)`;\n    if (glowRef.current && showGlow) {\n      glowRef.current.style.background = \"transparent\";\n    }\n  };\n\n  return (\n    <MouseEnterContext.Provider value={[isMouseEntered, setIsMouseEntered]}>\n      <div\n        className={cn(\n          \"py-20 flex items-center justify-center\",\n          containerClassName\n        )}\n        style={{\n          perspective: `${perspective}px`,\n        }}\n      >\n        <div\n          ref={containerRef}\n          onMouseEnter={handleMouseEnter}\n          onMouseMove={handleMouseMove}\n          onMouseLeave={handleMouseLeave}\n          className={cn(\n            \"flex items-center justify-center relative transition-all duration-200 ease-out\",\n            className\n          )}\n          style={{\n            transformStyle: \"preserve-3d\",\n          }}\n        >\n          {showGlow && (\n            <div\n              ref={glowRef}\n              className=\"absolute inset-0 opacity-0 group-hover:opacity-100 transition-opacity duration-500 rounded-xl z-[-1]\"\n              style={{\n                transformStyle: \"preserve-3d\",\n                transform: \"translateZ(-1px)\",\n              }}\n            />\n          )}\n          {children}\n        </div>\n      </div>\n    </MouseEnterContext.Provider>\n  );\n};\n\nexport const CardBody = ({\n  children,\n  className,\n  bgClassName,\n  showParticles = false,\n  particleCount = 20,\n}: {\n  children: React.ReactNode;\n  className?: string;\n  bgClassName?: string;\n  showParticles?: boolean;\n  particleCount?: number;\n}) => {\n  const [isMouseEntered] = useMouseEnter();\n  const particlesRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    if (!showParticles || !particlesRef.current) return;\n\n    // Create particles only when mouse enters\n    if (isMouseEntered) {\n      const particles = particlesRef.current;\n      particles.innerHTML = \"\";\n\n      for (let i = 0; i < particleCount; i++) {\n        const particle = document.createElement(\"div\");\n        particle.className = \"absolute rounded-full opacity-0\";\n\n        // Random size between 3px and 6px\n        const size = Math.random() * 3 + 3;\n        particle.style.width = `${size}px`;\n        particle.style.height = `${size}px`;\n\n        // Random position\n        particle.style.left = `${Math.random() * 100}%`;\n        particle.style.top = `${Math.random() * 100}%`;\n\n        // Random background color - pastel colors\n        const hue = Math.floor(Math.random() * 360);\n        particle.style.backgroundColor = `hsla(${hue}, 80%, 80%, 0.8)`;\n\n        // Random animation duration between 1s and 3s\n        const duration = Math.random() * 2 + 1;\n        particle.style.animation = `float ${duration}s ease-in-out infinite`;\n\n        // Random delay\n        particle.style.animationDelay = `${Math.random() * 2}s`;\n\n        // Random transform\n        const translateZ = Math.random() * 50 + 20;\n        particle.style.transform = `translateZ(${translateZ}px)`;\n\n        particles.appendChild(particle);\n      }\n    }\n  }, [isMouseEntered, showParticles, particleCount]);\n\n  return (\n    <div\n      className={cn(\n        \"h-96 w-96 [transform-style:preserve-3d] [&>*]:[transform-style:preserve-3d] relative group\",\n        className\n      )}\n    >\n      {showParticles && (\n        <div\n          ref={particlesRef}\n          className=\"absolute inset-0 [transform-style:preserve-3d] pointer-events-none z-10\"\n        />\n      )}\n      <div\n        className={cn(\n          \"absolute inset-0 rounded-xl bg-gradient-to-br from-black-50 to-white dark:from-gray-900 dark:to-gray-800 transition-all duration-500\",\n          bgClassName\n        )}\n        style={{\n          transformStyle: \"preserve-3d\",\n          transform: \"translateZ(-1px)\",\n          backfaceVisibility: \"hidden\",\n        }}\n      />\n      {children}\n    </div>\n  );\n};\n\nexport const CardItem = ({\n  as: Tag = \"div\",\n  children,\n  className,\n  translateX = 0,\n  translateY = 0,\n  translateZ = 0,\n  rotateX = 0,\n  rotateY = 0,\n  rotateZ = 0,\n  scale = 1,\n  transition = \"duration-200 ease-out\",\n  ...rest\n}: {\n  as?: React.ElementType;\n  children: React.ReactNode;\n  className?: string;\n  translateX?: number | string;\n  translateY?: number | string;\n  translateZ?: number | string;\n  rotateX?: number | string;\n  rotateY?: number | string;\n  rotateZ?: number | string;\n  scale?: number | string;\n  transition?: string;\n  [key: string]: any;\n}) => {\n  const ref = useRef<HTMLDivElement>(null);\n  const [isMouseEntered] = useMouseEnter();\n\n  useEffect(() => {\n    handleAnimations();\n  }, [isMouseEntered]);\n\n  const handleAnimations = () => {\n    if (!ref.current) return;\n    if (isMouseEntered) {\n      ref.current.style.transform = `translateX(${translateX}px) translateY(${translateY}px) translateZ(${translateZ}px) rotateX(${rotateX}deg) rotateY(${rotateY}deg) rotateZ(${rotateZ}deg) scale(${scale})`;\n    } else {\n      ref.current.style.transform = `translateX(0px) translateY(0px) translateZ(0px) rotateX(0deg) rotateY(0deg) rotateZ(0deg) scale(1)`;\n    }\n  };\n\n  return (\n    <Tag\n      ref={ref}\n      className={cn(`w-fit transition ${transition}`, className)}\n      {...rest}\n    >\n      {children}\n    </Tag>\n  );\n};\n\n// Create a hook to use the context\nexport const useMouseEnter = () => {\n  const context = useContext(MouseEnterContext);\n  if (context === undefined) {\n    throw new Error(\"useMouseEnter must be used within a MouseEnterProvider\");\n  }\n  return context;\n};\n\nexport default function Card04() {\n  return (\n    <CardContainer\n      className=\"group/card\"\n      perspective={1500}\n      glowColor=\"rgba(125, 99, 255, 0.4)\"\n    >\n      <CardBody\n        className=\"bg-white dark:bg-gray-900 relative w-auto sm:w-[30rem] h-auto rounded-xl p-6 border border-black/[0.1] dark:border-white/[0.1] shadow-xl\"\n        bgClassName=\"bg-gradient-to-br from-indigo-50 to-purple-50 dark:from-gray-900 dark:to-indigo-950\"\n        showParticles={true}\n        particleCount={25}\n      >\n        <div className=\"card-shine rounded-xl\"></div>\n\n        <CardItem\n          translateZ=\"50\"\n          className=\"text-2xl font-bold text-indigo-800 dark:text-indigo-400 flex items-center gap-2\"\n        >\n          <Star className=\"w-5 h-5\" />\n          Cosmic Journey\n        </CardItem>\n\n        <CardItem\n          as=\"p\"\n          translateZ=\"60\"\n          className=\"text-indigo-700 dark:text-indigo-300 text-sm max-w-sm mt-2\"\n        >\n          Embark on an interstellar adventure through the cosmos. Hover to\n          navigate through the stars.\n        </CardItem>\n\n        <CardItem translateZ=\"100\" className=\"w-full mt-4\">\n          <img\n            src=\"https://images.unsplash.com/photo-1462331940025-496dfbfc7564?q=80&w=2822&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D\"\n            height=\"1000\"\n            width=\"1000\"\n            className=\"h-60 w-full object-cover rounded-xl shadow-md group-hover/card:shadow-xl transition-all duration-300\"\n            alt=\"Space landscape\"\n          />\n        </CardItem>\n\n        <CardItem translateZ=\"80\" className=\"flex items-center gap-2 mt-4\">\n          <Badge className=\"bg-indigo-100 text-indigo-800 dark:bg-indigo-900 dark:text-indigo-100\">\n            Space\n          </Badge>\n          <Badge className=\"bg-purple-100 text-purple-800 dark:bg-purple-900 dark:text-purple-100\">\n            Exploration\n          </Badge>\n        </CardItem>\n\n        <div className=\"flex justify-between items-center mt-8\">\n          <CardItem\n            translateZ={40}\n            as=\"button\"\n            className=\"flex items-center gap-1 text-xs font-medium text-indigo-600 dark:text-indigo-400\"\n          >\n            <Clock className=\"w-4 h-4\" />\n            <span>10 min journey</span>\n          </CardItem>\n\n          <CardItem\n            translateZ={40}\n            as=\"button\"\n            className=\"flex items-center gap-1 text-xs font-medium text-rose-600 dark:text-rose-400\"\n          >\n            <Heart className=\"w-4 h-4\" />\n            <span>412 likes</span>\n          </CardItem>\n        </div>\n\n        <div className=\"flex justify-between items-center mt-8\">\n          <CardItem\n            translateZ={40}\n            as=\"button\"\n            className=\"px-4 py-2 rounded-xl text-sm font-medium text-indigo-700 dark:text-indigo-300 hover:text-indigo-800 dark:hover:text-indigo-200 transition-colors\"\n          >\n            Learn more\n          </CardItem>\n\n          <CardItem\n            translateZ={40}\n            rotateZ={-4}\n            as={Button}\n            className=\"px-4 py-2 rounded-xl bg-indigo-600 hover:bg-indigo-700 text-white text-sm font-medium transition-colors\"\n          >\n            Launch Now\n            <ArrowRight className=\"w-4 h-4 ml-2\" />\n          </CardItem>\n        </div>\n      </CardBody>\n    </CardContainer>\n  );\n}\n",
      "path": "/src/components/xui/card/card-04.tsx",
      "target": "@/components/xui/card-04.tsx"
    }
  ]
}