{
  "name": "loader-02",
  "type": "registry:component",
  "dependencies": [
    "lucide-react",
    "motion"
  ],
  "registryDependencies": [],
  "files": [
    {
      "type": "registry:component",
      "content": "\"use client\";\n\nimport { useEffect, useState } from \"react\";\nimport { motion } from \"framer-motion\";\n\nconst Loader02 = ({\n  size = 100,\n  colorLight = \"from-teal-300 to-cyan-500\",\n  colorDark = \"from-cyan-400 to-blue-600\",\n  bubbleCount = 6,\n}: {\n  size?: number;\n  colorLight?: string;\n  colorDark?: string;\n  bubbleCount?: number;\n}) => {\n  const [isClient, setIsClient] = useState(false);\n\n  useEffect(() => {\n    setIsClient(true);\n  }, []);\n\n  // Don't render the animation on the server to avoid hydration issues\n  if (!isClient) {\n    return (\n      <div\n        className={`h-[100px] w-full rounded-full bg-gray-200 flex items-center justify-center`}\n      >\n        <span className=\"text-gray-500\">Loading...</span>\n      </div>\n    );\n  }\n\n  return (\n    <div\n      className={`relative h-[200px] w-full flex items-center justify-center`}\n    >\n      {/* Liquid Container */}\n      <div\n        className={`relative w-[64px] h-[64px]\n        } overflow-hidden rounded-full border-4 border-slate-300 dark:border-slate-600 shadow-inner`}\n      >\n        {/* Liquid */}\n        <motion.div\n          className={`absolute bottom-0 left-0 right-0 bg-gradient-to-b ${colorLight} dark:${colorDark}`}\n          initial={{ height: \"40%\" }}\n          animate={{\n            height: [\"40%\", \"60%\", \"40%\"],\n            y: [0, -5, 0],\n          }}\n          transition={{\n            duration: 3,\n            repeat: Number.POSITIVE_INFINITY,\n            repeatType: \"reverse\",\n            ease: \"easeInOut\",\n          }}\n        >\n          {/* Wave effect */}\n          <motion.div\n            className=\"absolute top-0 left-0 w-full\"\n            animate={{\n              y: [-10, 0, -10],\n            }}\n            transition={{\n              duration: 2,\n              repeat: Number.POSITIVE_INFINITY,\n              repeatType: \"reverse\",\n              ease: \"easeInOut\",\n            }}\n          >\n            <svg\n              className=\"w-full\"\n              viewBox=\"0 0 100 20\"\n              preserveAspectRatio=\"none\"\n            >\n              <motion.path\n                d=\"M0 10 Q 25 0, 50 10 Q 75 20, 100 10 V 30 H 0 Z\"\n                fill=\"url(#liquid-gradient)\"\n                animate={{\n                  d: [\n                    \"M0 10 Q 25 0, 50 10 Q 75 20, 100 10 V 30 H 0 Z\",\n                    \"M0 10 Q 25 20, 50 10 Q 75 0, 100 10 V 30 H 0 Z\",\n                    \"M0 10 Q 25 0, 50 10 Q 75 20, 100 10 V 30 H 0 Z\",\n                  ],\n                }}\n                transition={{\n                  duration: 5,\n                  repeat: Number.POSITIVE_INFINITY,\n                  ease: \"easeInOut\",\n                }}\n              />\n              <defs>\n                <linearGradient\n                  id=\"liquid-gradient\"\n                  x1=\"0\"\n                  y1=\"0\"\n                  x2=\"0\"\n                  y2=\"1\"\n                >\n                  <stop\n                    offset=\"0%\"\n                    stopColor=\"rgba(45, 212, 191, 0.8)\"\n                    className=\"dark:stop-color-[rgba(34,211,238,0.8)]\"\n                  />\n                  <stop\n                    offset=\"100%\"\n                    stopColor=\"rgba(6, 182, 212, 0.9)\"\n                    className=\"dark:stop-color-[rgba(37,99,235,0.9)]\"\n                  />\n                </linearGradient>\n              </defs>\n            </svg>\n          </motion.div>\n\n          {/* Bubbles */}\n          <Bubbles count={bubbleCount} />\n        </motion.div>\n      </div>\n    </div>\n  );\n};\n\nconst Bubbles = ({ count }: { count: number }) => {\n  return (\n    <>\n      {[...Array(count)].map((_, i) => {\n        const size = Math.random() * 8 + 4;\n        const left = Math.random() * 80 + 10;\n        const delay = Math.random() * 2;\n        const duration = Math.random() * 2 + 2;\n\n        return (\n          <motion.div\n            key={i}\n            className=\"absolute rounded-full bg-white/40 dark:bg-white/50\"\n            style={{\n              width: size,\n              height: size,\n              left: `${left}%`,\n              bottom: \"-20%\",\n            }}\n            animate={{\n              y: [0, -60, -80],\n              opacity: [0, 0.8, 0],\n              scale: [1, 1.2, 0.8],\n            }}\n            transition={{\n              duration,\n              delay,\n              repeat: Number.POSITIVE_INFINITY,\n              repeatDelay: Math.random() * 3,\n              ease: \"easeInOut\",\n            }}\n          />\n        );\n      })}\n    </>\n  );\n};\nexport default Loader02;\n\n// export const DemoLoader02 = () => {\n//   return (\n//     <Loader02\n//       size={40}\n//       colorLight=\"from-blue-400 to-blue-500\"\n//       colorDark=\"from-purple-600 to-indigo-800\"\n//       bubbleCount={10}\n//     />\n//   );\n// };\n\n// <Loader02\n// size={40}\n//  colorLight=\"from-pink-400 to-rose-500\"\n//  colorDark=\"from-purple-600 to-indigo-800\"\n//  bubbleCount={10}\n// />\n",
      "path": "/src/components/xui/loader/loader-02.tsx",
      "target": "@/components/xui/loader-02.tsx"
    }
  ]
}